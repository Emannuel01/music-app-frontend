import React, { useState, useEffect } from 'react';
import { Link } from 'react-router-dom';
import { useAuth } from '../context/AuthContext';
import playlistService from '../services/playlistService';
import favoriteService from '../services/favoriteService';
import historyService from '../services/historyService';
import recommendationService from '../services/recommendationService';
import ContentShelf from '../components/ContentShelf';
import PlaylistItem from '../components/PlaylistItem';
import SongItem from '../components/SongItem';
import GenreCard from '../components/GenreCard';

// --- Imagens de G√™neros ---
// Certifique-se de que os caminhos e nomes dos arquivos est√£o corretos
import sambaImg from '../assets/genres/samba.jpeg'; 
import eletronicaImg from '../assets/genres/eletronic.jpg';

// Lista est√°tica de g√™neros para descoberta
const browseGenres = [
  { name: 'Rock',       image: null,       color: '#800000' },
  { name: 'Pop',        image: null,          color: '#3a7bd5' },
  { name: 'Samba',      image: sambaImg,      color: '#f2994a' },
  { name: 'Eletr√¥nica', image: eletronicaImg, color: '#9d50bb' },
  { name: 'Hip Hop',    image: null,          color: '#ff416c' },
  { name: 'Jazz',       image: null,          color: '#00416a' },
];

function HomePage() {
  const { token } = useAuth();
  
  const [displayPlaylists, setDisplayPlaylists] = useState([]);
  const [recommendations, setRecommendations] = useState([]);
  const [loading, setLoading] = useState(true);
  const [isUserEmpty, setIsUserEmpty] = useState(true);

  useEffect(() => {
    // Apenas busca dados se houver um token
    if (token) {
      setLoading(true);
      
      // Busca todos os dados necess√°rios em paralelo para mais efici√™ncia
      Promise.all([
        playlistService.getMyPlaylists(),
        favoriteService.getMyFavorites(),
        historyService.getRecentPlays(),
        recommendationService.getForYou()
      ]).then(([playlistsData, favoritesData, recentPlaysData, recommendationsData]) => {
        
        // Define se o usu√°rio tem conte√∫do personalizado ou n√£o
        const hasContent = playlistsData.length > 0 || favoritesData.length > 0 || recentPlaysData.length > 0;
        setIsUserEmpty(!hasContent);

        // Salva as recomenda√ß√µes no estado
        setRecommendations(recommendationsData);
        
        // L√≥gica para montar a prateleira de playlists (reais e virtuais)
        if (hasContent) {
          const virtualPlaylists = [];

          // Cria a playlist virtual de "M√∫sicas Curtidas" se houver favoritos
          if (favoritesData.length > 0) {
            virtualPlaylists.push({
              id: 'favorites',
              name: 'M√∫sicas Curtidas',
              description: `${favoritesData.length} m√∫sicas`,
              audios: favoritesData,
              isVirtual: true,
              icon: '‚ô•',
            });
          }
          
          // Cria a playlist virtual de "Ouvidas Recentemente" se houver hist√≥rico
          if (recentPlaysData.length > 0) {
            virtualPlaylists.push({
              id: 'recent',
              name: 'Ouvidas Recentemente',
              description: `${recentPlaysData.length} m√∫sicas`,
              audios: recentPlaysData,
              isVirtual: true,
              icon: 'üïí',
            });
          }
          
          // Combina as playlists virtuais com as playlists reais do usu√°rio
          setDisplayPlaylists([...virtualPlaylists, ...playlistsData]);
        }

      }).catch(err => {
        console.error("N√£o foi poss√≠vel carregar os dados da Home:", err);
      }).finally(() => {
        setLoading(false);
      });
    } else {
      // Limpa tudo se o usu√°rio n√£o estiver logado
      setDisplayPlaylists([]);
      setRecommendations([]);
      setIsUserEmpty(true);
      setLoading(false);
    }
  }, [token]);


  // Se o usu√°rio n√£o estiver logado
  if (!token) {
    return (
      <div>
        <h1>Bem-vindo ao MusicApp</h1>
        <p><Link to="/login">Fa√ßa login</Link> para come√ßar a sua jornada musical.</p>
      </div>
    );
  }

  // Se estiver carregando os dados iniciais
  if (loading) {
    return <p style={{ color: 'white' }}>Carregando sua home base...</p>;
  }

  return (
    <div>
      <h1>In√≠cio</h1>
      
      {isUserEmpty ? (
        // Conte√∫do para novos usu√°rios, focado na descoberta
        <div>
          <p style={{ color: '#b3b3b3', fontSize: '1.1rem' }}>
            Parece que est√° um pouco vazio por aqui. Explore alguns g√™neros para come√ßar!
          </p>
          <ContentShelf
            title="Navegar por G√™neros"
            items={browseGenres}
            renderItem={(genre) => <GenreCard key={genre.name} genre={genre} />}
          />
        </div>
      ) : (
        // Conte√∫do para usu√°rios existentes, com conte√∫do personalizado
        <>
          <ContentShelf
            title="Recomendado para voc√™"
            items={recommendations}
            renderItem={(song) => <SongItem key={song.id} song={song} songList={recommendations} />}
          />

          <ContentShelf
            title="Suas Playlists e Atividades"
            items={displayPlaylists}
            renderItem={(playlist) => (
              <PlaylistItem 
                key={playlist.id} 
                playlist={playlist}
              />
            )}
          />
        </>
      )}
    </div>
  );
}

export default HomePage;